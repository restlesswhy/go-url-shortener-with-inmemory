// Code generated by MockGen. DO NOT EDIT.
// Source: inmemory.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUrlShortenerInmemory is a mock of UrlShortenerInmemory interface.
type MockUrlShortenerInmemory struct {
	ctrl     *gomock.Controller
	recorder *MockUrlShortenerInmemoryMockRecorder
}

// MockUrlShortenerInmemoryMockRecorder is the mock recorder for MockUrlShortenerInmemory.
type MockUrlShortenerInmemoryMockRecorder struct {
	mock *MockUrlShortenerInmemory
}

// NewMockUrlShortenerInmemory creates a new mock instance.
func NewMockUrlShortenerInmemory(ctrl *gomock.Controller) *MockUrlShortenerInmemory {
	mock := &MockUrlShortenerInmemory{ctrl: ctrl}
	mock.recorder = &MockUrlShortenerInmemoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlShortenerInmemory) EXPECT() *MockUrlShortenerInmemoryMockRecorder {
	return m.recorder
}

// CheckInmemory mocks base method.
func (m *MockUrlShortenerInmemory) CheckInmemory() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckInmemory")
}

// CheckInmemory indicates an expected call of CheckInmemory.
func (mr *MockUrlShortenerInmemoryMockRecorder) CheckInmemory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInmemory", reflect.TypeOf((*MockUrlShortenerInmemory)(nil).CheckInmemory))
}

// CreateInmemory mocks base method.
func (m *MockUrlShortenerInmemory) CreateInmemory(shortUrl, longUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInmemory", shortUrl, longUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInmemory indicates an expected call of CreateInmemory.
func (mr *MockUrlShortenerInmemoryMockRecorder) CreateInmemory(shortUrl, longUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInmemory", reflect.TypeOf((*MockUrlShortenerInmemory)(nil).CreateInmemory), shortUrl, longUrl)
}

// GetLongInmemory mocks base method.
func (m *MockUrlShortenerInmemory) GetLongInmemory(shortUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongInmemory", shortUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLongInmemory indicates an expected call of GetLongInmemory.
func (mr *MockUrlShortenerInmemoryMockRecorder) GetLongInmemory(shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongInmemory", reflect.TypeOf((*MockUrlShortenerInmemory)(nil).GetLongInmemory), shortUrl)
}

// GetShortInmemory mocks base method.
func (m *MockUrlShortenerInmemory) GetShortInmemory(longUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortInmemory", longUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortInmemory indicates an expected call of GetShortInmemory.
func (mr *MockUrlShortenerInmemoryMockRecorder) GetShortInmemory(longUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortInmemory", reflect.TypeOf((*MockUrlShortenerInmemory)(nil).GetShortInmemory), longUrl)
}
