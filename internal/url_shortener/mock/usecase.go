// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUSUseCase is a mock of USUseCase interface.
type MockUSUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUSUseCaseMockRecorder
}

// MockUSUseCaseMockRecorder is the mock recorder for MockUSUseCase.
type MockUSUseCaseMockRecorder struct {
	mock *MockUSUseCase
}

// NewMockUSUseCase creates a new mock instance.
func NewMockUSUseCase(ctrl *gomock.Controller) *MockUSUseCase {
	mock := &MockUSUseCase{ctrl: ctrl}
	mock.recorder = &MockUSUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUSUseCase) EXPECT() *MockUSUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUSUseCase) Create(ctx context.Context, longUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, longUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUSUseCaseMockRecorder) Create(ctx, longUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUSUseCase)(nil).Create), ctx, longUrl)
}

// Get mocks base method.
func (m *MockUSUseCase) Get(ctx context.Context, shortUrl string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, shortUrl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUSUseCaseMockRecorder) Get(ctx, shortUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUSUseCase)(nil).Get), ctx, shortUrl)
}
